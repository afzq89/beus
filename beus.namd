##################################################################
# Bias-Exchange Umbrella Sampling
# Mahmoud Moradi, University of Illinois (moradi@illinois.edu)
# partly based on lib/replica/umbrella.namd script (namd 2.9-10 release)
##################################################################

if { $job_id > 0 } {
    set old_job_id [expr $job_id-1]
    set oroot [format $output_root ""]
    set rstfile [glob $oroot.job$old_job_id.restart*.tcl]
    source [lindex $rstfile end]
}

set num_replicas [numReplicas]
set replica_id [myReplica]

###################################
# biases

source centers.tcl
proc replica_bias { i } {
  global centers
  return $centers($i)
}

###################################
# network definition

if {![info exists num_of_neighbors]} {
    set num_of_neighbors 1
}
if {![info exists periodic]} {
    set periodic 0
}

if {[info exists networkmap]} {
    source $networkmap
    proc replica_neighbors { i } {
	global rep_neighbors
	return $rep_neighbors($i)
    }
} elseif {[info exists gridmap]} {
    source $gridmap
    proc replica_neighbors { rep } {
	global grids ids num_of_neighbors periodic
	set nx 0
	set ny 0
	foreach i [array get grids] {
	    if {[lindex $i 0]>$nx} { set nx [lindex $i 0] }
	    if {[lindex $i 1]>$ny} { set ny [lindex $i 1] }
	}
	set nx [expr $nx+1]
	set ny [expr $ny+1]
	for {set ix 0 } {$ix < $nx } {incr ix} {
	    for {set iy 0 } {$iy < $ny } {incr iy} {
		for {set jx 0} {$jx <= 2*$num_of_neighbors} { incr jx } {
		    for {set jy 0} {$jy <= 2*$num_of_neighbors} { incr jy } {
    			set neighx [expr $ix+(int(($jx+1)/2))*(-1)**$jx]
    			set neighy [expr $iy+(int(($jy+1)/2))*(-1)**$jy]
			if {$periodic==1} {
	    		    set neighx [expr $neighx%$nx]
	    		    set neighy [expr $neighy%$ny]
			}
    			if { [info exists a($ix,$jx,$iy,$jy)] == 0 && [info exists a($neighx,$jx,$neighy,$jy)] == 0 && $jx+$jy > 0 && abs(int(($jx+1)/2))+abs(int(($jy+1)/2)) <= $num_of_neighbors} {
			    set a($ix,$jx,$iy,$jy) $neighx
    			    lappend a($ix,$jx,$iy,$jy) $neighy
    			    set a($neighx,$jx,$neighy,$jy) $ix
    			    lappend a($neighx,$jx,$neighy,$jy) $iy
    			}
		    }
		}
	    }
	}
	set ix [lindex $grids($rep) 0]
	set iy [lindex $grids($rep) 1]
    	set result {}
	for {set jx 0} {$jx <= 2*$num_of_neighbors} { incr jx } {
	    for {set jy 0} {$jy <= 2*$num_of_neighbors} { incr jy } {
		if {$jx+$jy > 0 && abs(int(($jx+1)/2))+abs(int(($jy+1)/2)) <= $num_of_neighbors} {
		    if {[info exists a($ix,$jx,$iy,$jy)]} {
			set neighx [lindex $a($ix,$jx,$iy,$jy) 0]
			set neighy [lindex $a($ix,$jx,$iy,$jy) 1]
    			if {[info exists ids($neighx,$neighy)]} {
    			    lappend result $ids($neighx,$neighy)
    			} else  {
    			    lappend result "$rep"
    			}
		    } elseif {[info exists a($ix,$jx,$iy,$jy)]==0} {
    			lappend result "$rep"
		    }
		}
	    }
	}
	return $result
    }
} else {
    if {[info exists num_columns]} {
	if {$num_columns != 1} {
	    set nx $num_columns
	    if { $num_replicas%$num_columns==0 && $num_columns>1 } {
		set ny [expr $num_replicas/$num_columns]
	    } else {
		error "num_replicas must be a multiply of num_columns!"
	    }
	}
    }
    if {$num_columns>1} {
	proc replica_neighbors { rep } {
	    global nx ny num_of_neighbors periodic
	    for {set ix 0 } {$ix < $nx } {incr ix} {
		for {set iy 0 } {$iy < $ny } {incr iy} {
		    for {set jx 0} {$jx <= 2*$num_of_neighbors} { incr jx } {
		        for {set jy 0} {$jy <= 2*$num_of_neighbors} { incr jy } {
    		    	    set neighx [expr $ix+(int(($jx+1)/2))*(-1)**$jx]
    			    set neighy [expr $iy+(int(($jy+1)/2))*(-1)**$jy]
			    if {$periodic==1} {
	    			set neighx [expr $neighx%$nx]
	    			set neighy [expr $neighy%$ny]
			    }
    			    if { [info exists a($ix,$jx,$iy,$jy)] == 0 && [info exists a($neighx,$jx,$neighy,$jy)] == 0 && $jx+$jy > 0 && abs(int(($jx+1)/2))+abs(int(($jy+1)/2)) <= $num_of_neighbors} {
				set a($ix,$jx,$iy,$jy) $neighx
    				lappend a($ix,$jx,$iy,$jy) $neighy
    				set a($neighx,$jx,$neighy,$jy) $ix
    				lappend a($neighx,$jx,$neighy,$jy) $iy
    			    }
			}
		    }
		}
	    }
	    set ix [expr $rep%$nx]
	    set iy [expr $rep/$nx]
    	    set result {}
	    for {set jx 0} {$jx <= 2*$num_of_neighbors} { incr jx } {
	        for {set jy 0} {$jy <= 2*$num_of_neighbors} { incr jy } {
		    if {$jx+$jy > 0 && abs(int(($jx+1)/2))+abs(int(($jy+1)/2)) <= $num_of_neighbors} {
		        if {[info exists a($ix,$jx,$iy,$jy)]} {
		    	    set neighx [lindex $a($ix,$jx,$iy,$jy) 0]
			    set neighy [lindex $a($ix,$jx,$iy,$jy) 1]
			    set neigh [expr "$neighy * $nx + $neighx"]
    			    if {$neighx>= 0 && $neighx < $nx && $neighy>= 0 && $neighy < $ny} {
    				lappend result $neigh
    			    } else  {
    			        lappend result "$rep"
    			    }
			} elseif {[info exists a($ix,$jx,$iy,$jy)]==0} {
    			    lappend result "$rep"
			}
		    }
		}
	    }
	    return $result
	}
    } else {
	proc replica_neighbors { rep } {
	    global num_replicas num_of_neighbors periodic
	    for {set i 0 } {$i < $num_replicas } {incr i} {
	        for {set j 0} {$j < 2*$num_of_neighbors} { incr j } {
    	    	    set neigh [expr $i+(int($j/2)+1)*(-1)**$j]
		    if {$periodic==1} {
			set neigh [expr $neigh%$num_replicas]
		    }
    		    if { [info exists a($i,$j)] == 0 && [info exists a($neigh,$j)] == 0 } {
    		        set a($i,$j) $neigh
    		        set a($neigh,$j) $i
    		    }
		}
	    }
	    set result {}
	    for {set j 0} {$j < 2*$num_of_neighbors} { incr j } {
	        if {[info exists a($rep,$j)]} {
    	    	    if {$a($rep,$j)>= 0 && $a($rep,$j) < $num_replicas} {
    		        lappend result $a($rep,$j)
    		    } else  {
    		        lappend result "$rep"
    		    }
		} elseif {[info exists a($rep,$j)]==0} {
    		    lappend result "$rep"
		}
	    }
	    return $result
	}
    }
}
# validate replica_neighbors proc - works in tclsh
for { set i 0 } { $i < $num_replicas } { incr i } {
  set j 0
  foreach nbr [replica_neighbors $i] {
    if { $nbr < 0 } {
      error "replica_neighbors inconsistency detected: neighbor $j of replica $i is $nbr but should not be negative" 
    }
    if { $nbr >= $num_replicas } {
      error "replica_neighbors inconsistency detected: neighbor $j of replica $i is $nbr but there are only $num_replicas replicas" 
    }
    set rnbrl [replica_neighbors $nbr]
    set rnbrc [llength $rnbrl]
    if { $j >= $rnbrc } {
      error "replica_neighbors inconsistency detected: neighbor $j of replica $i is $nbr but replica $nbr has only $rnbrc neighbors" 
    }
    set rnbr [lindex $rnbrl $j]
    if { $rnbr != $i } {
      error "replica_neighbors inconsistency detected: neighbor $j of replica $i is $nbr but neighbor $j of replica $nbr is $rnbr" 
    }
    incr j
  }
}

###################################
# input/output setting
replicaBarrier

source $system_conf

if {[info exists restart_root]} { #restart
  set restart_root [format $restart_root $replica_id]
  source $restart_root.$replica_id.tcl
} else {
  set i_job 0
  set i_run 0
  set i_step 0
  if {[info exists first_timestep]} {
    set i_step $first_timestep
  }
  set replica(index) $replica_id
  set nnbr 0
  foreach nbr [replica_neighbors $replica_id] {
    set replica(loc.$nnbr) $nbr
    set replica(index.$nnbr) $nbr
    set replica(exchanges_attempted.$nnbr) 0
    set replica(exchanges_accepted.$nnbr) 0
    incr nnbr
  }
  set replica(num_neighbors) $nnbr
}

set job_output_root "$output_root.job$i_job"
firsttimestep $i_step

set replica(colvarbias) [replica_bias $replica(index)]
for { set i 0 } { $i < $replica(num_neighbors) } { incr i } {
  set replica(colvarbias.$i) [replica_bias $replica(index.$i)]
}

seed [expr int(0*srand(int(100000*rand()) + 100*$replica_id) + 100000*rand())]
outputname [format $job_output_root.$replica_id $replica_id]

if {$i_run} { #restart
  bincoordinates $restart_root.$replica_id.coor
  binvelocities $restart_root.$replica_id.vel
  extendedSystem $restart_root.$replica_id.xsc
  colvarsInput $restart_root.$replica_id.colvars.state
} else {
    set input_name [format $input_root $replica_id]
    if {[info exists input_root]} {
	bincoordinates $input_name.coor
    }
    if {[info exists input_root]&&$usevel} {
	binvelocities $input_name.vel
    } else {
	if {[info exists temperature]} {
	    temperature $temperature
	} else {
	    error "temperature is not set!"
	}
    }
    if {[info exists input_root]&&$usexsc} {
	extendedSystem $input_name.xsc
    } else {
	if {[info exists cellinfo]} {
	    cellBasisVector1    [lindex $cellinfo 0]
	    cellBasisVector2    [lindex $cellinfo 1]
	    cellBasisVector3    [lindex $cellinfo 2]
	    cellOrigin          [lindex $cellinfo 3]
	} else {
	    error "cellinfo is not set!"
	}
    }
}

eval colvarbias [concat changeconfig $replica(colvarbias)]

set history_file [open [format "$job_output_root.$replica_id.history" $replica_id] "w"]
fconfigure $history_file -buffering line

###################################
# run the job

while {$i_run < $num_runs} {

  run $steps_per_run
  incr i_step $steps_per_run
  puts $history_file "$i_step $replica(index)"

  set swap [expr $i_run % $replica(num_neighbors)]

  set doswap 0
  if { $replica(index) < $replica(index.$swap) } {
    set BOLTZMAN 0.001987191
    set ediff [eval colvarbias [concat energydiff $replica(colvarbias.$swap)]]
    set ediff2 [replicaRecv $replica(loc.$swap)]
    set delta [expr ($ediff + $ediff2) / ( $BOLTZMAN * $temperature )]
    set doswap [expr $delta < 0. || exp(-1. * $delta) > rand()]
    replicaSend $doswap $replica(loc.$swap)
    if { $doswap } {
      set rid $replica(index)
      set rid2 $replica(index.$swap)
      puts stderr "EXCHANGE_ACCEPT $rid $rid2 RUN $i_run"
      incr replica(exchanges_accepted.$swap)
    }
    incr replica(exchanges_attempted.$swap)
  }
  if { $replica(index) > $replica(index.$swap) } {
    set ediff [eval colvarbias [concat energydiff $replica(colvarbias.$swap)]]
    replicaSend $ediff $replica(loc.$swap)
    set doswap [replicaRecv $replica(loc.$swap)]
  }

  set newloc $replica_id
  if { $doswap } {
    set newloc $replica(loc.$swap)
    set replica(loc.$swap) $replica_id
  }
  for { set i 0 } { $i < $replica(num_neighbors) } { incr i } {
    if { $i != $swap } {
      set replica(loc.$i) [replicaSendrecv $newloc $replica(loc.$i) $replica(loc.$i)]
    }
  }
  set oldidx $replica(index)
  if { $doswap } {
    array set replica [replicaSendrecv [array get replica] $newloc $newloc]
    eval colvarbias [concat changeconfig $replica(colvarbias)]
  }

  incr i_run

  if { $i_run % $runs_per_restart == 0 ||
        $i_run == $num_runs } {  # restart
    set restart_root "$job_output_root.restart$i_run"
    set rroot [format $restart_root.$replica_id $replica_id]
    output $rroot
    set oroot [format $job_output_root.$replica_id $replica_id]
    file rename -force $oroot.colvars.state $rroot.colvars.state
    set rfile [open [format "$restart_root.$replica_id.tcl" $replica_id] "w"]
    puts $rfile [list array set replica [array get replica]]
    close $rfile
    replicaBarrier
    if { $replica_id == 0 } {
      set rfile [open [format "$restart_root.tcl" ""] "w"]
      puts $rfile [list set i_job [expr $i_job + 1]]
      puts $rfile [list set i_run $i_run]
      puts $rfile [list set i_step $i_step]
      puts $rfile [list set restart_root $restart_root]
      close $rfile
      if [info exists old_restart_root] {
        set oldroot [format $old_restart_root ""]
        file delete $oldroot.tcl
      }
    }
    replicaBarrier
    if [info exists old_restart_root] {
      set oldroot [format $old_restart_root $replica_id]
      file delete $oldroot.$replica_id.tcl
      file delete $oldroot.$replica_id.coor
      file delete $oldroot.$replica_id.vel
      file delete $oldroot.$replica_id.xsc
      file delete $oldroot.$replica_id.colvars.state
    }
    set old_restart_root $restart_root
  }
}

replicaBarrier

